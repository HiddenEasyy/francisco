# -*- coding: utf-8 -*-
"""p7_emisiones.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1icDZvGmwmt7XnMze7VqUh5CsptkCybhn
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import datetime

 #guardamos el dataset en la varibale titan
em16=pd.read_csv('./2016.csv',delimiter=';')
em17=pd.read_csv('./2017.csv',delimiter=';')
em18=pd.read_csv('./2018.csv',delimiter=';')
em19=pd.read_csv('./2019.csv',delimiter=';')

# Concatenar los DataFrames en uno solo
datos_combinados = pd.concat([em16, em17,em18,em19], ignore_index=True)

# Mostrar información del DataFrame combinado
print("DataFrame combinado:")
print(datos_combinados)

# Filtrar las columnas del DataFrame
columnas_filtradas = datos_combinados.loc[:, ['ESTACION', 'MAGNITUD', 'ANO', 'MES',
                                              'D01', 'D02', 'D03', 'D04', 'D05', 'D06', 'D07',
                                              'D08', 'D09', 'D10', 'D11', 'D12', 'D13', 'D14',
                                              'D15', 'D16', 'D17', 'D18', 'D19', 'D20', 'D21',
                                              'D22', 'D23', 'D24', 'D25', 'D26', 'D27', 'D28',
                                              'D29', 'D30', 'D31']]

# Mostrar información del DataFrame con las columnas filtradas
print("DataFrame con las columnas filtradas:")
print(columnas_filtradas)

# Reestructurar el DataFrame usando la función melt
datos_reestructurados = pd.melt(datos_combinados, id_vars=['PROVINCIA', 'MUNICIPIO', 'ESTACION', 'MAGNITUD', 'PUNTO_MUESTREO', 'ANO', 'MES'], var_name='DIA', value_name='VALOR')

# Mostrar información del DataFrame reestructurado
print("DataFrame reestructurado:")
print(datos_reestructurados)



def crear_fecha(row):
    try:
        return datetime.datetime(row['ANO'], row['MES'], int(row['DIA'][1:]))
    except ValueError:
        return None

# Convertir las columnas de año, mes y día a formato datetime
datos_reestructurados['FECHA'] = datos_reestructurados.apply(crear_fecha, axis=1)

# Mostrar información del DataFrame con la columna de fecha añadida
print("DataFrame con la columna de fecha añadida:")
print(datos_reestructurados)


# Eliminar las filas con fechas no válidas
datos_reestructurados = datos_reestructurados[~pd.isnull(datos_reestructurados['FECHA'])]

# Ordenar el DataFrame por estaciones contaminantes y fecha
datos_reestructurados = datos_reestructurados.sort_values(by=['ESTACION', 'FECHA'])

# Mostrar información del DataFrame después de la limpieza y ordenamiento
print("DataFrame después de la limpieza y ordenamiento:")
print(datos_reestructurados)


# Obtener las estaciones únicas
estaciones_disponibles = datos_reestructurados['ESTACION'].unique()

# Obtener los contaminantes únicos
contaminantes_disponibles = datos_reestructurados['MAGNITUD'].unique()

# Mostrar las estaciones disponibles por pantalla
print("Estaciones disponibles:")
for estacion in estaciones_disponibles:
    print(estacion)

# Mostrar los contaminantes disponibles por pantalla
print("\nContaminantes disponibles:")
for contaminante in contaminantes_disponibles:
    print(contaminante)




# Define tu función obtener_emisiones_por_fecha()
def obtener_emisiones_por_fecha(datos, estacion, contaminante, fecha_inicio, fecha_fin):
    # Filtrar el DataFrame por estación, contaminante y rango de fechas
    filtro = (datos['ESTACION'] == estacion) & \
             (datos['MAGNITUD'] == contaminante) & \
             (datos['FECHA'] >= fecha_inicio) & \
             (datos['FECHA'] <= fecha_fin)
    datos_filtrados = datos[filtro]

    # Obtener la serie de emisiones del contaminante dado en la estación y rango de fechas dado
    emisiones = datos_filtrados['VALOR']

    return emisiones

# Ejemplo de uso de la función
estacion = 4
contaminante = 1
fecha_inicio = '2022-01-01'
fecha_fin = '2022-01-31'
emisiones_serie = obtener_emisiones_por_fecha(datos_reestructurados, estacion, contaminante, fecha_inicio, fecha_fin)
print(emisiones_serie)


# Convertir la serie 'VALOR' a tipo de datos numérico
datos_reestructurados['VALOR'] = pd.to_numeric(datos_reestructurados['VALOR'], errors='coerce')

# Agrupar los datos por contaminante y calcular estadísticas descriptivas para cada grupo
resumen_contaminantes = datos_reestructurados.groupby('MAGNITUD')['VALOR'].describe()

# Mostrar el resumen descriptivo para cada contaminante
print("Resumen descriptivo para cada contaminante:")
print(resumen_contaminantes)

# Agrupar los datos por contaminante y distrito, y calcular estadísticas descriptivas para cada grupo
resumen_contaminantes_distritos = datos_reestructurados.groupby(['MAGNITUD', 'PROVINCIA'])['VALOR'].describe()

# Mostrar el resumen descriptivo para cada contaminante por distrito
print("Resumen descriptivo para cada contaminante por distrito:")
print(resumen_contaminantes_distritos)

def resumen_descriptivo_emisiones(datos, estacion, contaminante):
    # Filtrar los datos por estación y contaminante
    datos_filtrados = datos[(datos['ESTACION'] == estacion) & (datos['MAGNITUD'] == contaminante)]

    # Verificar si el DataFrame está vacío
    if datos_filtrados.empty:
        return "No hay datos disponibles para la estación y el contaminante especificados."

    # Convertir la columna 'VALOR' a tipo de datos numérico
    datos_filtrados['VALOR'] = pd.to_numeric(datos_filtrados['VALOR'], errors='coerce')

    # Eliminar filas con valores no numéricos
    datos_filtrados = datos_filtrados.dropna(subset=['VALOR'])

    # Calcular estadísticas descriptivas para las emisiones del contaminante en la estación
    resumen = datos_filtrados['VALOR'].describe()

    return resumen

# Ejemplo de uso de la función
estacion = 4
contaminante = 1
resumen_estacion_contaminante = resumen_descriptivo_emisiones(datos_reestructurados, estacion, contaminante)
print("Resumen descriptivo de las emisiones del contaminante {} en la estación {}:".format(contaminante, estacion))
print(resumen_estacion_contaminante)


def emisiones_medias_mensuales(datos, contaminante, año):
    # Filtrar el DataFrame por contaminante y año
    filtro = (datos['MAGNITUD'] == contaminante) & (datos['ANO'] == año)
    datos_filtrados = datos[filtro]

    # Agrupar los datos por mes y calcular la media de las emisiones
    emisiones_medias = datos_filtrados.groupby('MES')['VALOR'].mean()

    return emisiones_medias

# Ejemplo de uso de la función
contaminante = 1
año = 2016
emisiones_medias = emisiones_medias_mensuales(datos_reestructurados, contaminante, año)
print(emisiones_medias)

def medias_mensuales_por_estacion(datos, estacion):
    # Filtrar el DataFrame por estación
    datos_estacion = datos[datos['ESTACION'] == estacion]

    # Agrupar los datos por mes y contaminante, y calcular la media de las emisiones
    medias_mensuales = datos_estacion.groupby(['MES', 'MAGNITUD'])['VALOR'].mean().reset_index()

    # Reorganizar los datos para tener los meses como filas y los tipos de contaminantes como columnas
    medias_mensuales_pivot = medias_mensuales.pivot(index='MES', columns='MAGNITUD', values='VALOR')

    return medias_mensuales_pivot

# Ejemplo de uso de la función
estacion = 4
medias_mensuales = medias_mensuales_por_estacion(datos_reestructurados, estacion)
print(medias_mensuales)