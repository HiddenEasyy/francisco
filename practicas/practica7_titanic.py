# -*- coding: utf-8 -*-
"""practica7_titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bf0ZzLwz_VVkdKiGX0pXaYVzK9uJOXhl
"""

import pandas as pd

 #guardamos el dataset en la varibale titan
titan=pd.read_csv('./titanic.csv')

print(titan.head()) #imprimimos solo los encabezados

titan.shape #nos da el numero de datos en renglones y columnas
# Número de datos
num_datos = titan.shape[0]  # Usamos la función shape para obtener el número de filas
print("Número de datos:", num_datos)

# Nombres de las columnas
nombres_columnas = titan.columns.tolist()  # Convertimos el índice de columnas a una lista
print("\nNombres de las columnas:", nombres_columnas)

# Tipos de datos de las columnas
tipos_datos = titan.dtypes
print("\nTipos de datos de las columnas:")
print(tipos_datos)

# 10 primeras filas
primeras_filas = titan.head(10)
print("\n10 primeras filas:")
print(primeras_filas)

# 10 últimas filas
ultimas_filas = titan.tail(10)
print("\n10 últimas filas:")
print(ultimas_filas)

# Seleccionar datos del pasajero con identificador 148
datos_pasajero_148 = titan.loc[148]
print("Datos del pasajero con identificador 148:")
print(datos_pasajero_148)

# Seleccionar filas pares del DataFrame
filas_pares = titan.iloc[::2]
print("Filas pares del DataFrame:")
print(filas_pares)

# Filtrar las filas donde la clase es igual a 1 (primera clase)
primera_clase = titan[titan['Pclass'] == 1]

# Seleccionar la columna 'Name' y ordenar alfabéticamente
nombres_primera_clase_ordenados = primera_clase['Name'].sort_values()

# Mostrar los nombres de las personas en primera clase ordenados alfabéticamente
print("Nombres de las personas que iban en primera clase ordenadas alfabéticamente:")
print(nombres_primera_clase_ordenados)

# Calcular el número de personas que sobrevivieron y murieron
sobrevivieron = titan['Survived'].sum()
murieron = titan.shape[0] - sobrevivieron

# Calcular el porcentaje de personas que sobrevivieron y murieron
porcentaje_sobrevivieron = (sobrevivieron / titan.shape[0]) * 100
porcentaje_murieron = (murieron / titan.shape[0]) * 100

# Mostrar los resultados por pantalla
print("Porcentaje de personas que sobrevivieron: {:.2f}%".format(porcentaje_sobrevivieron))
print("Porcentaje de personas que murieron: {:.2f}%".format(porcentaje_murieron))

# Calcular el número de personas que sobrevivieron en cada clase
sobrevivieron_por_clase = titan.groupby('Pclass')['Survived'].sum()

# Calcular el total de personas en cada clase
total_por_clase = titan.groupby('Pclass')['Survived'].count()

# Calcular el porcentaje de personas que sobrevivieron en cada clase
porcentaje_sobrevivieron_por_clase = (sobrevivieron_por_clase / total_por_clase) * 100

# Mostrar los resultados por pantalla
print("Porcentaje de personas que sobrevivieron en cada clase: ")
print(porcentaje_sobrevivieron_por_clase)

# Eliminar del DataFrame los pasajeros con edad desconocida
titan_edad_desc = titan.dropna(subset=['Age'])

# Mostrar la información del DataFrame resultante
print("DataFrame sin pasajeros con edad desconocida:")
print(titan_edad_desc)

# Filtrar las filas para obtener solo las mujeres
mujeres = titan[titan['Sex'] == 'female']

# Calcular la edad media de las mujeres que viajabnan en cada clase
edad_media_mujer_clase = mujeres.groupby('Pclass')['Age'].mean()

# Mostrar los resultados por pantalla
print("Edad media de las mujeres que viajaban en cada clase:")
print(edad_media_mujer_clase)

# Añadir una nueva columna booleana para indicar si el pasajero era menor de edad o no
titan['Menor_de_edad'] = titan['Age'] < 18

# Mostrar el DataFrame con la nueva columna
print("DataFrame con la nueva columna 'Menor_de_edad':")
print(titan)

# Añadir una nueva columna booleana para indicar si el pasajero es menor de edad o no
titan['Menor_de_edad'] = titan['Age'] < 18

# Calcular el porcentaje de menores y mayores de edad que sobrevivieron en cada clase
vivos_edad_y_clase = titan.groupby(['Pclass', 'Menor_de_edad'])['Survived'].mean() * 100

# Mostrar los resultados por pantalla
print("Porcentaje de menores y mayores de edad que sobrevivieron en cada clase:")
print(vivos_edad_y_clase)

titan['Pclass'].value_counts()