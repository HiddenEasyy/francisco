# -*- coding: utf-8 -*-
"""proy_final_prog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18JFC3f1-1Cm1OjJQIILLbTWu8w9QLs_d
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import datetime

#guardamos el dataset en la varibale clima
clima_df=pd.read_csv('./lluvia.csv')

#Mostrar la cantidad de filas y columnas del dataser
clima_df.shape

#Imprimir encabezados
clima_df.head()

# Nombres de las columnas
nombres_columnas = clima_df.columns.tolist()  # Convertimos el índice de columnas a una lista
print("\nNombres de las columnas:", nombres_columnas)

# Tipos de datos de las columnas
tipos_datos = clima_df.dtypes
print("\nTipos de datos de las columnas:")
print(tipos_datos)

# estadísticas descriptivas de las temperaturas
descripcion_temp = clima_df['MaxTemp'].describe()
print(descripcion_temp)
descripcion_rain = clima_df['MinTemp'].describe()
print(descripcion_rain)

# Eliminar las columnas que no necesitemos o que no tengan datos utilizables
clima_es_df = clima_df.drop(columns=['Evaporation', 'Sunshine','WindGustDir' , 'WindDir9am','WindDir3pm'])

# Verificar que las columnas han sido eliminadas
print(clima_es_df.head())

# Calcular el promedio de MinTemp y MaxTemp por Location
prom_temp_location = clima_es_df[['Location', 'MinTemp', 'MaxTemp']].groupby('Location').mean()

#Grega una nueva columna donde se hace un promedio de las temperaturas mx y min y las ordena de menor a mayor
prom_temp_location['PromTemp'] = prom_temp_location[['MinTemp', 'MaxTemp']].mean(axis=1)
prom_temp_location = prom_temp_location.sort_values(by='PromTemp')

# Mostrar los resultados y redondear a 2 decimales
print(prom_temp_location.round(2))

# Asegúrate de que la columna 'Date' esté en formato de fecha
clima_es_df['Date'] = pd.to_datetime(clima_es_df['Date'])

# Agregar una columna de año
clima_es_df['Year'] = clima_es_df['Date'].dt.year

# Calcular los promedios anuales
annual_avg = clima_es_df.groupby(['Location', 'Year'])[['MinTemp', 'MaxTemp', 'Rainfall']].mean().reset_index()

# Filtrar datos para una región específica (por ejemplo, "Sydney")
region = 'Sydney'
region_annual_avg = annual_avg[annual_avg['Location'] == region]

# Configurar el estilo de los gráficos
sns.set(style="whitegrid")

# Graficar las tendencias de temperaturas y precipitación
plt.figure(figsize=(14, 7))

# Tendencia de temperaturas mínimas y máximas
plt.subplot(2, 1, 1)
plt.plot(region_annual_avg['Year'], region_annual_avg['MinTemp'], marker='o', label='MinTemp')
plt.plot(region_annual_avg['Year'], region_annual_avg['MaxTemp'], marker='o', label='MaxTemp')
plt.title(f'Tendencias de Temperaturas Anuales en {region}')
plt.xlabel('Año')
plt.ylabel('Temperatura (°C)')
plt.xticks(region_annual_avg['Year'], rotation=45)
plt.legend()

# Tendencia de precipitación
plt.subplot(2, 1, 2)
plt.plot(region_annual_avg['Year'], region_annual_avg['Rainfall'], marker='o', label='Rainfall', color='blue')
plt.title(f'Tendencia de Precipitación Anual en {region}')
plt.xlabel('Año')
plt.ylabel('Precipitación (mm)')
plt.xticks(region_annual_avg['Year'], rotation=45)
plt.legend()

plt.tight_layout()
plt.show()

# Submuestreo de datos
sampled_df = clima_es_df.iloc[::7, :]

# Filtrar datos para una región específica
region = 'Sydney'
region_sampled_df = sampled_df[sampled_df['Location'] == region]

# Graficar las tendencias de temperaturas y precipitación
plt.figure(figsize=(14, 7))

# Tendencia de temperaturas mínimas y máximas
plt.subplot(2, 1, 1)
plt.plot(region_sampled_df['Date'], region_sampled_df['MinTemp'], label='MinTemp')
plt.plot(region_sampled_df['Date'], region_sampled_df['MaxTemp'], label='MaxTemp')
plt.title(f'Tendencias de Temperaturas Submuestreadas en {region}')
plt.xlabel('Fecha')
plt.ylabel('Temperatura (°C)')
plt.legend()

# Tendencia de precipitación
plt.subplot(2, 1, 2)
plt.plot(region_sampled_df['Date'], region_sampled_df['Rainfall'], label='Rainfall', color='blue')
plt.title(f'Tendencia de Precipitación Submuestreada en {region}')
plt.xlabel('Fecha')
plt.ylabel('Precipitación (mm)')
plt.legend()

plt.tight_layout()
plt.show()

import matplotlib.dates as mdates

# Cambiar columna 'Date' a formato de fecha
clima_es_df['Date'] = pd.to_datetime(clima_es_df['Date'])

# Filtrar datos para una región específica
region = 'Sydney'
region_df = clima_es_df[clima_es_df['Location'] == region]

# Configurar el estilo de los gráficos
sns.set(style="whitegrid")

# Crear una figura para los gráficos con un tamaño especificado
plt.figure(figsize=(14, 7))

# Tendencia de temperaturas mínimas y máximas
plt.subplot(2, 1, 1)  # Crear un subplot para las temperaturas (primero de dos, 2 filas, 1 columna, primer gráfico)
plt.plot(region_df['Date'], region_df['MinTemp'], label='MinTemp')  # Graficar la temperatura mínima
plt.plot(region_df['Date'], region_df['MaxTemp'], label='MaxTemp')  # Graficar la temperatura máxima
plt.title(f'Tendencias de Temperaturas en {region}')  # Título del gráfico
plt.xlabel('Fecha')  # Etiqueta del eje x
plt.ylabel('Temperatura (°C)')  # Etiqueta del eje y
plt.legend()  # Mostrar la leyenda
plt.gca().xaxis.set_major_locator(mdates.YearLocator())  # Configurar las etiquetas del eje x para mostrar solo los años
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))  # Formatear las etiquetas del eje x para mostrar solo el año
plt.xticks(rotation=45)  # Rotar las etiquetas del eje x 45 grados para mejorar la legibilidad

# Tendencia de precipitación
plt.subplot(2, 1, 2)  # Crear un subplot para la precipitación (segundo de dos, 2 filas, 1 columna, segundo gráfico)
plt.plot(region_df['Date'], region_df['Rainfall'], label='Rainfall', color='blue')  # Graficar la precipitación
plt.title(f'Tendencia de Precipitación en {region}')  # Título del gráfico
plt.xlabel('Fecha')  # Etiqueta del eje x
plt.ylabel('Precipitación (mm)')  # Etiqueta del eje y
plt.legend()  # Mostrar la leyenda
plt.gca().xaxis.set_major_locator(mdates.YearLocator())  # Configurar las etiquetas del eje x para mostrar solo los años
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y'))  # Formatear las etiquetas del eje x para mostrar solo el año
plt.xticks(rotation=45)  # Rotar las etiquetas del eje x 45 grados para mejorar la legibilidad

# Ajustar el layout para que los subplots no se solapen
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Agregar columnas de año y mes para análisis temporal
# Estas nuevas columnas permiten análisis y agrupaciones por año y mes.
clima_es_df['Year'] = clima_es_df['Date'].dt.year  # Extraer el año de la columna 'Date'
clima_es_df['Month'] = clima_es_df['Date'].dt.month  # Extraer el mes de la columna 'Date'

# Calcular las medias mensuales y anuales para cada región
# Agrupa los datos por ubicación, año y mes, y luego calcula la media de 'MinTemp', 'MaxTemp' y 'Rainfall'.
monthly_avg = clima_es_df.groupby(['Location', 'Year', 'Month'])[['MinTemp', 'MaxTemp', 'Rainfall']].mean().reset_index()
# Agrupa los datos por ubicación y año, y luego calcula la media de 'MinTemp', 'MaxTemp' y 'Rainfall'.
annual_avg = clima_es_df.groupby(['Location', 'Year'])[['MinTemp', 'MaxTemp', 'Rainfall']].mean().reset_index()

# Graficar tendencias anuales para todas las regiones
# Crear una nueva figura para las gráficas de tendencias anuales
plt.figure(figsize=(14, 7))

# Tendencias anuales de temperatura
# Utiliza seaborn para crear un gráfico de líneas que muestra las tendencias de la temperatura máxima anual para cada región.
sns.lineplot(x='Year', y='MaxTemp', hue='Location', data=annual_avg)
plt.title('Tendencia Anual de Temperaturas Máximas en Diferentes Regiones')  # Título del gráfico
plt.xlabel('Año')  # Etiqueta del eje x
plt.ylabel('Temperatura Máxima (°C)')  # Etiqueta del eje y
# Configura la leyenda para mostrar fuera del gráfico, a la derecha.
plt.legend(title='Location', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()  # Muestra el gráfico

# Crear otra figura para las gráficas de tendencias anuales de precipitación
plt.figure(figsize=(14, 7))

# Tendencias anuales de precipitación
# Utiliza seaborn para crear un gráfico de líneas que muestra las tendencias de la precipitación anual para cada región.
sns.lineplot(x='Year', y='Rainfall', hue='Location', data=annual_avg)
plt.title('Tendencia Anual de Precipitación en Diferentes Regiones')  # Título del gráfico
plt.xlabel('Año')  # Etiqueta del eje x
plt.ylabel('Precipitación Anual (mm)')  # Etiqueta del eje y
# Configura la leyenda para mostrar fuera del gráfico, a la derecha.
plt.legend(title='Location', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()  # Muestra el gráfico

clima_es_df.head()

# Tendencias mensuales en una región específica
region = 'Sydney'
monthly_region_df = monthly_avg[monthly_avg['Location'] == region]

plt.figure(figsize=(14, 7))

# Tendencias mensuales de temperatura
sns.lineplot(x='Month', y='MaxTemp', hue='Year', data=monthly_region_df, palette='viridis')
plt.title(f'Tendencias Mensuales de Temperatura Máxima en {region}')
plt.xlabel('Mes')
plt.ylabel('Temperatura Máxima (°C)')
plt.legend(title='Year', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

plt.figure(figsize=(14, 7))

# Tendencias mensuales de precipitación
sns.lineplot(x='Month', y='Rainfall', hue='Year', data=monthly_region_df, palette='viridis')
plt.title(f'Tendencias Mensuales de Precipitación en {region}')
plt.xlabel('Mes')
plt.ylabel('Precipitación Mensual (mm)')
plt.legend(title='Year', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Función para identificar años con eventos climáticos extremos
def find_extreme_years(df, variable, top_n=5):
    extreme_years = df.groupby(['Location', 'Year'])[variable].mean().reset_index()
    extreme_years = extreme_years.sort_values(by=variable, ascending=False).groupby('Location').head(top_n)
    return extreme_years

# Identificar años con temperaturas máximas más altas
extreme_temp_years = find_extreme_years(clima_es_df, 'MaxTemp')

# Identificar años con precipitación más alta
extreme_rainfall_years = find_extreme_years(clima_es_df, 'Rainfall')

# Mostrar los resultados
print("Años con temperaturas máximas más altas por región:")
print(extreme_temp_years)

print("\nAños con precipitación más alta por región:")
print(extreme_rainfall_years)

# Función para comparar períodos específicos
def compare_periods(df, start_year, end_year, variable):
    period_data = df[(df['Year'] >= start_year) & (df['Year'] <= end_year)]
    period_avg = period_data.groupby('Location')[variable].mean().reset_index()
    return period_avg

# Comparar los años del 2008 al 2012 coon los 2013 hasta el 2017
period1 = compare_periods(clima_es_df, 2008, 2012, 'MaxTemp')
period2 = compare_periods(clima_es_df, 2013, 2017, 'MaxTemp')

# Merge para comparación
comparison = period1.merge(period2, on='Location', suffixes=('_08-12', '_13-17'))

# Mostrar los resultados
print("Comparación de temperaturas máximas entre los años 2008-2012 y 2013-2017:")
print(comparison)

# Graficar la comparación de temperaturas máximas
comparison.set_index('Location')[['MaxTemp_08-12', 'MaxTemp_13-17']].plot(kind='bar', figsize=(14, 7))

# Personalizar el gráfico
plt.title('Comparación de Temperaturas Máximas Promedio por Período')
plt.xlabel('Región')
plt.ylabel('Temperatura Máxima Promedio (°C)')
plt.xticks(rotation=90)
plt.legend(title='Período')
plt.tight_layout()

# Mostrar el gráfico
plt.show()

# Función para identificar tendencias crecientes o decrecientes
def identify_trends(df, variable):
    trends = []
    locations = df['Location'].unique()
    for location in locations:
        loc_data = df[df['Location'] == location].sort_values(by='Year')
        if loc_data[variable].is_monotonic_increasing:
            trend = 'Increasing'
        elif loc_data[variable].is_monotonic_decreasing:
            trend = 'Decreasing'
        else:
            trend = 'No clear trend'
        trends.append((location, trend))
    return trends

# Identificar tendencias en temperaturas máximas
temp_trends = identify_trends(annual_avg, 'MaxTemp')

# Mostrar los resultados
print("Tendencias en temperaturas máximas por región:")
for location, trend in temp_trends:
    print(f"{location}: {trend}")